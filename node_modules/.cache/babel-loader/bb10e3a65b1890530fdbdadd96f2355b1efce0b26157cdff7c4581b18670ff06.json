{"ast":null,"code":"import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/transitions.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\r\n * Decide whether we should block this animation. Previously, we achieved this\r\n * just by checking whether the key was listed in protectedKeys, but this\r\n * posed problems if an animation was triggered by afterChildren and protectedKeys\r\n * had been set to true in the meantime.\r\n */\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var _a;\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = targetAndTransition;\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n  for (const key in target) {\n    const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n    const valueTarget = target[key];\n    if (valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n    const valueTransition = {\n      delay,\n      elapsed: 0,\n      ...getValueTransition(transition || {}, key)\n    };\n    /**\r\n     * If this is the first time a value is being animated, check\r\n     * to see if we're handling off from an existing animation.\r\n     */\n    let isHandoff = false;\n    if (window.HandoffAppearAnimations) {\n      const props = visualElement.getProps();\n      const appearId = props[optimizedAppearDataAttribute];\n      if (appearId) {\n        const elapsed = window.HandoffAppearAnimations(appearId, key);\n        if (elapsed !== null) {\n          valueTransition.elapsed = elapsed;\n          isHandoff = true;\n        }\n      }\n    }\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition, visualElement, isHandoff));\n    const animation = value.animation;\n    if (animation) {\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.add(key);\n        animation.then(() => willChange.remove(key));\n      }\n      animations.push(animation);\n    }\n  }\n  if (transitionEnd) {\n    Promise.all(animations).then(() => {\n      frame.update(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n      });\n    });\n  }\n  return animations;\n}\nexport { animateTarget };","map":{"version":3,"names":["transformProps","optimizedAppearDataAttribute","animateMotionValue","isWillChangeMotionValue","setTarget","getValueTransition","frame","shouldBlockAnimation","_ref","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","animateTarget","visualElement","targetAndTransition","delay","transitionOverride","type","arguments","length","undefined","_a","transition","getDefaultTransition","transitionEnd","target","willChange","getValue","animations","animationTypeState","animationState","getState","value","latestValues","valueTarget","valueTransition","elapsed","isHandoff","window","HandoffAppearAnimations","props","getProps","appearId","start","shouldReduceMotion","has","animation","add","then","remove","push","Promise","all","update"],"sources":["C:/Users/fearr/YouthLifeSupport/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"sourcesContent":["import { transformProps } from '../../render/html/utils/transform.mjs';\r\nimport { optimizedAppearDataAttribute } from '../optimized-appear/data-id.mjs';\r\nimport { animateMotionValue } from './motion-value.mjs';\r\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\r\nimport { setTarget } from '../../render/utils/setters.mjs';\r\nimport { getValueTransition } from '../utils/transitions.mjs';\r\nimport { frame } from '../../frameloop/frame.mjs';\r\n\r\n/**\r\n * Decide whether we should block this animation. Previously, we achieved this\r\n * just by checking whether the key was listed in protectedKeys, but this\r\n * posed problems if an animation was triggered by afterChildren and protectedKeys\r\n * had been set to true in the meantime.\r\n */\r\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\r\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\r\n    needsAnimating[key] = false;\r\n    return shouldBlock;\r\n}\r\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\r\n    var _a;\r\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\r\n    const willChange = visualElement.getValue(\"willChange\");\r\n    if (transitionOverride)\r\n        transition = transitionOverride;\r\n    const animations = [];\r\n    const animationTypeState = type &&\r\n        visualElement.animationState &&\r\n        visualElement.animationState.getState()[type];\r\n    for (const key in target) {\r\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\r\n        const valueTarget = target[key];\r\n        if (valueTarget === undefined ||\r\n            (animationTypeState &&\r\n                shouldBlockAnimation(animationTypeState, key))) {\r\n            continue;\r\n        }\r\n        const valueTransition = {\r\n            delay,\r\n            elapsed: 0,\r\n            ...getValueTransition(transition || {}, key),\r\n        };\r\n        /**\r\n         * If this is the first time a value is being animated, check\r\n         * to see if we're handling off from an existing animation.\r\n         */\r\n        let isHandoff = false;\r\n        if (window.HandoffAppearAnimations) {\r\n            const props = visualElement.getProps();\r\n            const appearId = props[optimizedAppearDataAttribute];\r\n            if (appearId) {\r\n                const elapsed = window.HandoffAppearAnimations(appearId, key);\r\n                if (elapsed !== null) {\r\n                    valueTransition.elapsed = elapsed;\r\n                    isHandoff = true;\r\n                }\r\n            }\r\n        }\r\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\r\n            ? { type: false }\r\n            : valueTransition, visualElement, isHandoff));\r\n        const animation = value.animation;\r\n        if (animation) {\r\n            if (isWillChangeMotionValue(willChange)) {\r\n                willChange.add(key);\r\n                animation.then(() => willChange.remove(key));\r\n            }\r\n            animations.push(animation);\r\n        }\r\n    }\r\n    if (transitionEnd) {\r\n        Promise.all(animations).then(() => {\r\n            frame.update(() => {\r\n                transitionEnd && setTarget(visualElement, transitionEnd);\r\n            });\r\n        });\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport { animateTarget };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}